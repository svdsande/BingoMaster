/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.5.0.0 (NJsonSchema v10.1.15.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class BingoCardClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : <any>window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    generateBingoCards(name: string | null | undefined, size: number | undefined, isCenterSquareFree: boolean | undefined, backgroundColor: string | null | undefined, borderColor: string | null | undefined, amount: number | undefined, paperSize: string | null | undefined): Promise<BingoCardModel> {
        let url_ = this.baseUrl + "/api/BingoCard";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());
        if (size === null || size === undefined)
            throw new Error("The parameter 'size' cannot be null.");
        else
            content_.append("Size", size.toString());
        if (isCenterSquareFree === null || isCenterSquareFree === undefined)
            throw new Error("The parameter 'isCenterSquareFree' cannot be null.");
        else
            content_.append("IsCenterSquareFree", isCenterSquareFree.toString());
        if (backgroundColor !== null && backgroundColor !== undefined)
            content_.append("BackgroundColor", backgroundColor.toString());
        if (borderColor !== null && borderColor !== undefined)
            content_.append("BorderColor", borderColor.toString());
        if (amount === null || amount === undefined)
            throw new Error("The parameter 'amount' cannot be null.");
        else
            content_.append("Amount", amount.toString());
        if (paperSize !== null && paperSize !== undefined)
            content_.append("PaperSize", paperSize.toString());

        let options_ = <RequestInit>{
            body: content_,
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGenerateBingoCards(_response);
        });
    }

    protected processGenerateBingoCards(response: Response): Promise<BingoCardModel> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BingoCardModel.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BingoCardModel>(<any>null);
    }
}

export class BingoCardModel implements IBingoCardModel {
    name?: string | undefined;
    grids?: number[] | undefined;

    constructor(data?: IBingoCardModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            if (Array.isArray(_data["grids"])) {
                this.grids = [] as any;
                for (let item of _data["grids"])
                    this.grids!.push(item);
            }
        }
    }

    static fromJS(data: any): BingoCardModel {
        data = typeof data === 'object' ? data : {};
        let result = new BingoCardModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.grids)) {
            data["grids"] = [];
            for (let item of this.grids)
                data["grids"].push(item);
        }
        return data; 
    }
}

export interface IBingoCardModel {
    name?: string | undefined;
    grids?: number[] | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}